"use strict";
// Концепция обобщений (generics) в TypeScript позволяет создавать функции, классы и интерфейсы, которые могут работать с различными типами данных, не теряя при этом информации о типах. Это делает код более универсальным и повышает его переиспользуемость.
//
// Функция getData<T>(data: T): T представляет собой обобщенную функцию, которая принимает аргумент data типа T и возвращает значение того же типа T.Обобщенный параметр T может быть использован для представления произвольного типа данных.
//
function getData(data) {
    return data;
}
// Вызов функции с различными типами данных
console.log(getData('any string').length); // Возвращает длину строки
console.log(getData(123).toFixed(2)); // Преобразует число в строку с двумя знаками после запятой
// При вызове getData('any string') обобщенный параметр T заменяется на тип string, поэтому возвращаемое значение также имеет тип string, и мы можем использовать метод length, который определен для строк.
// При вызове getData(123) обобщенный параметр T заменяется на тип number, поэтому возвращаемое значение также имеет тип number, и мы можем использовать метод toFixed, который определен для чисел.
// const newGetDat = [];
// чтобы показать что именно мы ждем мы должны сказать, что это тип - функция, мы что-то здесь получим и что-то должны вернуть, функцию типизируем также как и объявляли; название (data -> d) может быть любым, главное порядок. теперь можно присвоить только ф-ю соответствующего типа, которая принимает на вход одинакового типа данные, с ними работает и возвращает
const newGetData = getData;
console.log(newGetData('any string').length);
console.log(newGetData(123).toFixed(2));
